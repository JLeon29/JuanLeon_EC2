package com.jleon.bodega.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jleon.bodega.model.dto.ClienteRequestDto;
import com.jleon.bodega.model.dto.ClienteResponseDto;
import com.jleon.bodega.service.IClienteService;

@RestController
@RequestMapping("api/cliente")
public class ClienteController {
	
	@Autowired
	private IClienteService iClienteService;
	
	@GetMapping("/listar")
	public ResponseEntity<List<ClienteResponseDto>> listar(){
		
		return new ResponseEntity<List<ClienteResponseDto>>(iClienteService.listarCliente(),HttpStatus.OK);
	}
	
	@PostMapping("/guardar")
	public ResponseEntity<Void> guardar(@RequestBody ClienteRequestDto clienteRequestDto){
		
		servicio.guardarCurso(curso);
		return new ResponseEntity<Void>(HttpStatus.CREATED);
	}
	
	@RequestMapping(method = RequestMethod.GET, path = "/listar/{id}")
	public @ResponseBody ResponseEntity<CursoResponseDto> cursoPorId(@PathVariable Integer id){
		
		CursoResponseDto curso = servicio.cursoPorId(id);
		if(curso != null) {
			return new ResponseEntity<CursoResponseDto>(curso, HttpStatus.OK);
			
		}
		
		return new ResponseEntity<CursoResponseDto>(HttpStatus.NOT_FOUND);
		
	}
	
	@RequestMapping(method = RequestMethod.DELETE, path = "/eliminar/{id}")
	public ResponseEntity<Void> eliminar(@PathVariable Integer id){
		
		CursoResponseDto curso = servicio.cursoPorId(id);
		if(curso != null) {
			servicio.eliminarCurso(id);
			
			return new ResponseEntity<Void>(HttpStatus.OK);
			
		}
		
		return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		
	}
	
	@RequestMapping(method = RequestMethod.PUT, path = "/editar")
	public ResponseEntity<Void> editar (@RequestBody CursoRequestDto curso){
		
		CursoResponseDto cursoEncontrado = servicio.cursoPorId(curso.getIdRequest());
		if(cursoEncontrado != null) {
			servicio.editarCurso(curso);
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
	}

}
